@SubscribeBtn = React.createClass
  
  getDefaultProps:
    reg: null
    sub: null
    client: null

  getInitialState: ->
    if 'serviceWorker' of navigator
      console.log('Service Worker is supported')
      navigator.serviceWorker.register("<%= asset_path 'notification/sw.js' %>")
      .then((serviceWorkerRegistration) =>
        @props.reg = serviceWorkerRegistration
        @props.reg.pushManager.getSubscription().then((pushSubscription) =>
          if pushSubscription
            @sub = pushSubscription
            @setState { isSubscribed: true, title: 'Unsubscribe'}
        )
        @setState available: true
        console.log('Service Worker is ready :^)', @props.reg)
      ).catch( (error) ->
        console.log('Service Worker Error :^(', error)
      )
    isSubscribed: false
    available: false
    title: "Subscribe"

  handleClick: (e) ->
    e.preventDefault()
    if @state.isSubscribed
      @unsubscribe()
    else
      @subscribe()

  subscribe: ->
    @props.reg.pushManager.subscribe( userVisibleOnly: true )
    .then( (pushSubscription) =>
      @sub = pushSubscription
      console.log('Subscribed! Endpoint:', @sub.endpoint)
      $.post '/clients', { client: { notification_address: @sub.endpoint } }, (data) =>
        console.log('Post successful:', data)
        @setState { isSubscribed: true, title: 'Unsubscribe'}
      , 'JSON'
    )

  unsubscribe: ->
    @sub.unsubscribe().then( (event) =>
      console.log('Unsubscribed!', event)
      $.ajax
        method: 'DELETE'
        url: "/clients/#{ @props.client.id }"
        dataType: 'JSON'
        success: () =>
          console.log('Delete successful')
          @setState { isSubscribed: false, title: 'Subscribe' }
      , 'JSON'
    ).catch( (error) =>
      console.log('Error unsubscribing', error)
    )

  render: ->
    React.DOM.button
      className: "btn btn-primary"
      id: "sub-push-notif-btn"
      disabled: !@state.available
      onClick: @handleClick
      @state.title
