@SubscribeBtn = React.createClass
  getInitialState: ->
    if 'serviceWorker' of navigator
      console.log('Service Worker is supported')
      navigator.serviceWorker.register("<%= asset_path 'notification/sw.js' %>")
      .then((serviceWorkerRegistration) =>
        serviceWorkerRegistration.pushManager.getSubscription().then(@handleSubscriptionExists)
        @setState { available: true, reg: serviceWorkerRegistration }
        console.log('Service Worker is ready :^)', @state.reg)
      ).catch( (error) ->
        console.log('Service Worker Error :^(', error)
      )
    reg: null
    sub: null
    client: null
    isSubscribed: false
    available: false
    title: "Subscribe"

  formatEndpoint: (endpoint) ->
    result = endpoint.split("/")
    result[result.length - 1]

  handleSubscriptionExists: (pushSubscription) ->
    if pushSubscription
      $.get
        url: "/clients/"
        data: subscription_id: @formatEndpoint(pushSubscription.endpoint)
        dataType: 'JSON'
        success: (data) =>
          console.log('Get successful')
          @setState { isSubscribed: true, title: 'Unsubscribe', sub: pushSubscription, client: data }
      , 'JSON'

  handleClick: (e) ->
    e.preventDefault()
    if @state.isSubscribed
      @unsubscribe()
    else
      @subscribe()

  subscribe: ->
    @state.reg.pushManager.subscribe( userVisibleOnly: true )
    .then( (pushSubscription) =>
      console.log('Subscribed! Endpoint:', pushSubscription.endpoint)
      @setState sub: pushSubscription
      $.post '/clients', { client: { subscription_id: @formatEndpoint(@state.sub.endpoint) } }, (data) =>
        console.log('Post successful:', data)
        @setState { isSubscribed: true, title: 'Unsubscribe', client: data}
      , 'JSON'
    )

  unsubscribe: ->
    @state.sub.unsubscribe().then( (event) =>
      console.log('Unsubscribed!', event)
      $.ajax
        method: 'DELETE'
        url: "/clients/#{ @state.client.id }"
        dataType: 'JSON'
        success: () =>
          console.log('Delete successful')
          @setState { isSubscribed: false, title: 'Subscribe' }
      , 'JSON'
    ).catch( (error) =>
      console.log('Error unsubscribing', error)
    )

  render: ->
    React.DOM.div "subscribe",
      React.createElement PushBtn, client: @state.client
      React.DOM.button
        className: "btn btn-primary"
        disabled: !@state.available
        onClick: @handleClick
        @state.title
