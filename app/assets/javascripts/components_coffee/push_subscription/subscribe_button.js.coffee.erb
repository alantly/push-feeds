@SubscribeBtn = React.createClass
  getInitialState: ->
    if 'serviceWorker' of navigator
      console.log('Service Worker is supported')
      navigator.serviceWorker.register("<%= asset_path 'notification/sw.js' %>")
      .then((serviceWorkerRegistration) =>
        serviceWorkerRegistration.pushManager.getSubscription().then(@handleSubscriptionExists)
        @setState { available: true, reg: serviceWorkerRegistration }
        console.log('Service Worker is ready :^)', @state.reg)
      ).catch( (error) ->
        console.log('Service Worker Error :^(', error)
      )
    reg: null
    sub: null
    client: null
    isSubscribed: false
    available: false
    title: "Subscribe to Push Notifications"

  formatEndpoint: (endpoint) ->
    result = endpoint.split("/")
    result[result.length - 1]

  handleSubscriptionExists: (pushSubscription) ->
    if pushSubscription
      console.log('Subscription exists!')
      $.get
        url: "/clients/"
        data: endpoint: @formatEndpoint(pushSubscription.endpoint)
        dataType: 'JSON'
        success: (data) =>
          console.log('Get successful')
          if data
            @setState { isSubscribed: true, title: 'Unsubscribe to Push Notifications', sub: pushSubscription, client: data }
          else
            console.log('Not found in server: Unsubscribing!')
            pushSubscription.unsubscribe()
      , 'JSON'

  handleClick: (e) ->
    e.preventDefault()
    if @state.isSubscribed
      @unsubscribe()
    else
      @subscribe()

  subscribe: ->
    @state.reg.pushManager.subscribe( userVisibleOnly: true )
    .then( (pushSubscription) =>
      @setState sub: pushSubscription
      $.post '/clients', { client: pushSubscription.toJSON() }
      , (data) =>
        console.log('Subscribed successful')
        @setState { isSubscribed: true, title: 'Unsubscribe to Push Notifications', client: data}
      , 'JSON'
    )

  unsubscribe: ->
    @state.sub.unsubscribe().then( (event) =>
      $.ajax
        method: 'DELETE'
        url: "/clients/#{ @state.client.id }"
        dataType: 'JSON'
        success: () =>
          console.log('Unsubscribed!')
          @setState { isSubscribed: false, title: 'Subscribe to Push Notifications', client: null }
      , 'JSON'
    ).catch( (error) =>
      console.log('Error unsubscribing', error)
    )

  render: ->
    React.DOM.div null,
      React.DOM.div
        className: "row"
        React.DOM.div
          className: 'col-md-12'
          React.DOM.button
            className: "btn btn-primary"
            disabled: !@state.available
            onClick: @handleClick
            @state.title
      React.DOM.div
        className: 'row'
        React.DOM.div
          className: 'col-md-12'
          React.createElement PushBtn, client: @state.client
